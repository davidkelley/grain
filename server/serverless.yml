service: grain

provider:
  name: aws
  runtime: nodejs4.3
  apiKeys:
    - master
  iamRoleStatements:
    - Effect: "Allow"
      Action: "*"
      Resource: "*"

plugins:
  - serverless-webpack
  - serverless-mocha-plugin

functions:

  enumerator:
    handler: handler.enumerator
    description: "Enumerates over '${opt:stage}' IAM Role resources"
    events:
      - http:
          path: latest/meta-data/iam/security-credentials
          method: GET
          private: true
          integration: lambda
          response:
            headers:
              Content-Type: "'text/plain'"
              Cache-Control: "'max-age=20'"
            template: $input.path('$')

  credentials:
    handler: handler.credentials
    description: "Assumes a specific '${opt:region}/${opt:stage}' IAM role"
    events:
      - http:
          path: latest/meta-data/iam/security-credentials/{role}
          method: GET
          private: true
          integration: lambda
          response:
            headers:
              Cache-Control: "'max-age=1800'"

resources:
  Resources:
    Role:
      Type: "AWS::IAM::Role"
      Properties:
        Path: "/grain/${opt:region}/${opt:stage}/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "account"
              Effect: "Allow"
              Principal:
                AWS: { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":root" ] ] }
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "RestrictIAMAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Deny"
                  Action: "iam:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "iam:GenerateCredentialReport"
                    - "iam:GenerateServiceLastAccessedDetails"
                    - "iam:Get*"
                    - "iam:List*"
                  Resource: "*"
